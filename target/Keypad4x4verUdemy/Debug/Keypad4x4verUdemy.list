
Keypad4x4verUdemy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000eb8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800107c  0800107c  0001107c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800116c  0800116c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800116c  0800116c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800116c  0800116c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800116c  0800116c  0001116c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001170  08001170  00011170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000064  080011d8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  080011d8  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000244d  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000653  00000000  00000000  000224e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  00022b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e8  00000000  00000000  00022c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002bfc  00000000  00000000  00022d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000147e  00000000  00000000  0002593c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000097af  00000000  00000000  00026dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00030569  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a28  00000000  00000000  000305bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001064 	.word	0x08001064

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08001064 	.word	0x08001064

08000204 <delay>:
*/
#include<stdint.h>
#include<stdio.h>

void delay(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<500000; i++);
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e002      	b.n	8000216 <delay+0x12>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a04      	ldr	r2, [pc, #16]	; (800022c <delay+0x28>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d9f8      	bls.n	8000210 <delay+0xc>
}
 800021e:	bf00      	nop
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr
 800022c:	0007a11f 	.word	0x0007a11f

08000230 <main>:

int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b08a      	sub	sp, #40	; 0x28
 8000234:	af00      	add	r7, sp, #0
//***********Peripheral register addresses
//6.3.10 RCC AHB1 peripheral clock enable register (RCC_AHB1ENR)
	uint32_t volatile *const pClockCtrlReg=(uint32_t*) (0x40023800+0x30);	//6.3.10  (RCC_AHB1ENR)
 8000236:	4b82      	ldr	r3, [pc, #520]	; (8000440 <main+0x210>)
 8000238:	627b      	str	r3, [r7, #36]	; 0x24
//7.4.1 GPIO port mode register (GPIOx_MODER) (x = A..H)
	uint32_t volatile *const pPortAModeReg=(uint32_t*)0x40020000;
 800023a:	4b82      	ldr	r3, [pc, #520]	; (8000444 <main+0x214>)
 800023c:	623b      	str	r3, [r7, #32]
	uint32_t volatile *const pPortBModeReg=(uint32_t*)0x40020400;
 800023e:	4b82      	ldr	r3, [pc, #520]	; (8000448 <main+0x218>)
 8000240:	61fb      	str	r3, [r7, #28]
//  7.4.4 GPIO port pull-up/pull-down register (GPIOx_PUPDR) (x = A..H)
	uint32_t volatile *const pPortApullUpDownlReg=(uint32_t*)(0x40020000+0x0C);
 8000242:	4b82      	ldr	r3, [pc, #520]	; (800044c <main+0x21c>)
 8000244:	61bb      	str	r3, [r7, #24]
	uint32_t volatile *const pPortBpullUpDownlReg=(uint32_t*)(0x40020400+0x0C);
 8000246:	4b82      	ldr	r3, [pc, #520]	; (8000450 <main+0x220>)
 8000248:	617b      	str	r3, [r7, #20]
//7.4.5 GPIO port input data register (GPIOx_IDR) (x = A..H)
	uint32_t volatile *const pPortAInputReg=(uint32_t*)(0x40020000+0x10);
 800024a:	4b82      	ldr	r3, [pc, #520]	; (8000454 <main+0x224>)
 800024c:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const pPortBInputReg=(uint32_t*)(0x40020400+0x10);
 800024e:	4b82      	ldr	r3, [pc, #520]	; (8000458 <main+0x228>)
 8000250:	60fb      	str	r3, [r7, #12]
//7.4.6 GPIO port output data register (GPIOx_ODR) (x = A..H)
	uint32_t volatile *const pPortAOutputReg=(uint32_t*)(0x40020000+0x14);
 8000252:	4b82      	ldr	r3, [pc, #520]	; (800045c <main+0x22c>)
 8000254:	60bb      	str	r3, [r7, #8]
	uint32_t volatile *const pPortBOutputReg=(uint32_t*)(0x40020400+0x14);
 8000256:	4b82      	ldr	r3, [pc, #520]	; (8000460 <main+0x230>)
 8000258:	607b      	str	r3, [r7, #4]

//************Cnable the peripheral clock of GPIO* peripheral
	*pClockCtrlReg |= (1<<0); 	//Enable Clock on PortA
 800025a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f043 0201 	orr.w	r2, r3, #1
 8000262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000264:	601a      	str	r2, [r3, #0]
	*pClockCtrlReg |= (1<<1);	//Enable Clock on PortB
 8000266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f043 0202 	orr.w	r2, r3, #2
 800026e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000270:	601a      	str	r2, [r3, #0]
	*pClockCtrlReg |= (1<<2);	//Enable Clock on PortC
 8000272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f043 0204 	orr.w	r2, r3, #4
 800027a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800027c:	601a      	str	r2, [r3, #0]
//************Configure outputs (rows)
	//Configure PA8 IO pin as output
	*pPortAModeReg |=(1<<16);	//
 800027e:	6a3b      	ldr	r3, [r7, #32]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000286:	6a3b      	ldr	r3, [r7, #32]
 8000288:	601a      	str	r2, [r3, #0]
	//Configure PB10 IO pin as output
	*pPortBModeReg |=(1<<20);	//set 20 position
 800028a:	69fb      	ldr	r3, [r7, #28]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000292:	69fb      	ldr	r3, [r7, #28]
 8000294:	601a      	str	r2, [r3, #0]
	//Configure PB4 IO pin as output
	*pPortBModeReg &=~(1<<9);	//clear 9 position
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	601a      	str	r2, [r3, #0]
	*pPortBModeReg |=(1<<8);	//set 8 position
 80002a2:	69fb      	ldr	r3, [r7, #28]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80002aa:	69fb      	ldr	r3, [r7, #28]
 80002ac:	601a      	str	r2, [r3, #0]
	//Configure PB5 IO pin as output
	*pPortBModeReg |=(1<<10);	//set 10 position
 80002ae:	69fb      	ldr	r3, [r7, #28]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80002b6:	69fb      	ldr	r3, [r7, #28]
 80002b8:	601a      	str	r2, [r3, #0]

//configure output for led
	//Configure PA5 IO pin as output
		//a. clear 10 and 11 position
	*pPortAModeReg &=~(3<<10);//*pPortAModeReg &= 0xFFFFF3FF;
 80002ba:	6a3b      	ldr	r3, [r7, #32]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80002c2:	6a3b      	ldr	r3, [r7, #32]
 80002c4:	601a      	str	r2, [r3, #0]
		//b make 10 position as 1 set
	*pPortAModeReg |= (1<<10);//*pPortAModeReg |= 0x00000400;
 80002c6:	6a3b      	ldr	r3, [r7, #32]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80002ce:	6a3b      	ldr	r3, [r7, #32]
 80002d0:	601a      	str	r2, [r3, #0]

//************Configure inputs (columns)
	//Configure PA10 IO pin as input
	*pPortAModeReg &=~(3<<20);	//clear 20;21 position
 80002d2:	6a3b      	ldr	r3, [r7, #32]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80002da:	6a3b      	ldr	r3, [r7, #32]
 80002dc:	601a      	str	r2, [r3, #0]
	//Configure PA2 IO pin as input
	*pPortAModeReg &=~(3<<4);	//clear 4;5 position
 80002de:	6a3b      	ldr	r3, [r7, #32]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80002e6:	6a3b      	ldr	r3, [r7, #32]
 80002e8:	601a      	str	r2, [r3, #0]
	//Configure PA3 IO pin as input
	*pPortAModeReg &=~(3<<6);	//clear 6;7 position
 80002ea:	6a3b      	ldr	r3, [r7, #32]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80002f2:	6a3b      	ldr	r3, [r7, #32]
 80002f4:	601a      	str	r2, [r3, #0]
	//Configure PB3 IO pin as input
	*pPortBModeReg &=~(3<<6);	//clear 6;7 position
 80002f6:	69fb      	ldr	r3, [r7, #28]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80002fe:	69fb      	ldr	r3, [r7, #28]
 8000300:	601a      	str	r2, [r3, #0]
//***********Enable internal pull-up resistors for outputs
	//Configure PA10 IO pin with pull-up
	*pPortApullUpDownlReg |=(1<<20);	//set 21 position
 8000302:	69bb      	ldr	r3, [r7, #24]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800030a:	69bb      	ldr	r3, [r7, #24]
 800030c:	601a      	str	r2, [r3, #0]
	//Configure PA2 IO pin with pull-up
	*pPortApullUpDownlReg |=(1<<4);		//set 4 position
 800030e:	69bb      	ldr	r3, [r7, #24]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f043 0210 	orr.w	r2, r3, #16
 8000316:	69bb      	ldr	r3, [r7, #24]
 8000318:	601a      	str	r2, [r3, #0]
	//Configure PA3 IO pin with pull-up
	*pPortApullUpDownlReg |=(1<<6);		//set 6 position
 800031a:	69bb      	ldr	r3, [r7, #24]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000322:	69bb      	ldr	r3, [r7, #24]
 8000324:	601a      	str	r2, [r3, #0]
	//Configure PB3 IO pin with pull-up
	*pPortBpullUpDownlReg |=(1<<6);		//set 6 position
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	601a      	str	r2, [r3, #0]

//**********BEGIN***********
	printf("proverca\n");
 8000332:	484c      	ldr	r0, [pc, #304]	; (8000464 <main+0x234>)
 8000334:	f000 fa3e 	bl	80007b4 <puts>

while(1){
//***********Make all (outputs) rows HIGH
	//Configure PB10 IO pin as 1
		*pPortBOutputReg |=(1<<10);	//
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	601a      	str	r2, [r3, #0]
	//Configure PB4 IO pin as 1
		*pPortBOutputReg |=(1<<4);	//
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f043 0210 	orr.w	r2, r3, #16
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	601a      	str	r2, [r3, #0]
	//Configure PB5 IO pin as 1
		*pPortBOutputReg |=(1<<5);	//
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	f043 0220 	orr.w	r2, r3, #32
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
	//Configure PA8 IO pin as 1
		*pPortAOutputReg |=(1<<8);	//
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	601a      	str	r2, [r3, #0]
//**********Make R1 LOW PA8
	//Configure PA8 IO pin as 0 /Row 1
		*pPortAOutputReg &=~(1<<8);	//R1
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	601a      	str	r2, [r3, #0]
//scan the columns
	//check C1 PB3 low or high
		if(!(*pPortBInputReg & (1<<3))){
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f003 0308 	and.w	r3, r3, #8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d104      	bne.n	800038a <main+0x15a>
			//key is pressed
			delay();
 8000380:	f7ff ff40 	bl	8000204 <delay>
			printf("pressed key 1\n");
 8000384:	4838      	ldr	r0, [pc, #224]	; (8000468 <main+0x238>)
 8000386:	f000 fa15 	bl	80007b4 <puts>
		}//endIF
	//check C2-PA10 low or high
		if(!(*pPortAInputReg & (1<<10))){
 800038a:	693b      	ldr	r3, [r7, #16]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000392:	2b00      	cmp	r3, #0
 8000394:	d104      	bne.n	80003a0 <main+0x170>
			//key is pressed
			delay();
 8000396:	f7ff ff35 	bl	8000204 <delay>
			printf("pressed key 2\n");
 800039a:	4834      	ldr	r0, [pc, #208]	; (800046c <main+0x23c>)
 800039c:	f000 fa0a 	bl	80007b4 <puts>
		}//endIF
	//check C3-PA2 low or high
		if(!(*pPortAInputReg & (1<<2))){
 80003a0:	693b      	ldr	r3, [r7, #16]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 0304 	and.w	r3, r3, #4
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d104      	bne.n	80003b6 <main+0x186>
			//key is pressed
			delay();
 80003ac:	f7ff ff2a 	bl	8000204 <delay>
			printf("pressed key 3\n");
 80003b0:	482f      	ldr	r0, [pc, #188]	; (8000470 <main+0x240>)
 80003b2:	f000 f9ff 	bl	80007b4 <puts>
		}//endIF
	//check C4-PA2 low or high
		if(!(*pPortAInputReg & (1<<3))){
 80003b6:	693b      	ldr	r3, [r7, #16]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f003 0308 	and.w	r3, r3, #8
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d104      	bne.n	80003cc <main+0x19c>
			//key is pressed
			delay();
 80003c2:	f7ff ff1f 	bl	8000204 <delay>
			printf("pressed key A\n");
 80003c6:	482b      	ldr	r0, [pc, #172]	; (8000474 <main+0x244>)
 80003c8:	f000 f9f4 	bl	80007b4 <puts>
		}//endIF

		//Configure PA8 IO pin as 1
			*pPortAOutputReg |=(1<<8);	//
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	601a      	str	r2, [r3, #0]
//**********Make R2-PB10 low
		//Configure PB10 IO pin as 0
			*pPortBOutputReg &=~(1<<10);//R2
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	601a      	str	r2, [r3, #0]

			//scan the columns
				//check C1 PB3 low or high
					if(!(*pPortBInputReg & (1<<3))){
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f003 0308 	and.w	r3, r3, #8
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d104      	bne.n	80003fa <main+0x1ca>
						//key is pressed
						delay();
 80003f0:	f7ff ff08 	bl	8000204 <delay>
						printf("pressed key 4\n");
 80003f4:	4820      	ldr	r0, [pc, #128]	; (8000478 <main+0x248>)
 80003f6:	f000 f9dd 	bl	80007b4 <puts>
					}//endIF
				//check C2-PA10 low or high
					if(!(*pPortAInputReg & (1<<10))){
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000402:	2b00      	cmp	r3, #0
 8000404:	d104      	bne.n	8000410 <main+0x1e0>
						//key is pressed
						delay();
 8000406:	f7ff fefd 	bl	8000204 <delay>
						printf("pressed key 5\n");
 800040a:	481c      	ldr	r0, [pc, #112]	; (800047c <main+0x24c>)
 800040c:	f000 f9d2 	bl	80007b4 <puts>
					}//endIF
				//check C3-PA2 low or high
					if(!(*pPortAInputReg & (1<<2))){
 8000410:	693b      	ldr	r3, [r7, #16]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f003 0304 	and.w	r3, r3, #4
 8000418:	2b00      	cmp	r3, #0
 800041a:	d104      	bne.n	8000426 <main+0x1f6>
						//key is pressed
						delay();
 800041c:	f7ff fef2 	bl	8000204 <delay>
						printf("pressed key 6\n");
 8000420:	4817      	ldr	r0, [pc, #92]	; (8000480 <main+0x250>)
 8000422:	f000 f9c7 	bl	80007b4 <puts>
					}//endIF
				//check C4-PA2 low or high
					if(!(*pPortAInputReg & (1<<3))){
 8000426:	693b      	ldr	r3, [r7, #16]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f003 0308 	and.w	r3, r3, #8
 800042e:	2b00      	cmp	r3, #0
 8000430:	d182      	bne.n	8000338 <main+0x108>
						//key is pressed
						delay();
 8000432:	f7ff fee7 	bl	8000204 <delay>
						printf("pressed key B\n");
 8000436:	4813      	ldr	r0, [pc, #76]	; (8000484 <main+0x254>)
 8000438:	f000 f9bc 	bl	80007b4 <puts>
		*pPortBOutputReg |=(1<<10);	//
 800043c:	e77c      	b.n	8000338 <main+0x108>
 800043e:	bf00      	nop
 8000440:	40023830 	.word	0x40023830
 8000444:	40020000 	.word	0x40020000
 8000448:	40020400 	.word	0x40020400
 800044c:	4002000c 	.word	0x4002000c
 8000450:	4002040c 	.word	0x4002040c
 8000454:	40020010 	.word	0x40020010
 8000458:	40020410 	.word	0x40020410
 800045c:	40020014 	.word	0x40020014
 8000460:	40020414 	.word	0x40020414
 8000464:	0800107c 	.word	0x0800107c
 8000468:	08001088 	.word	0x08001088
 800046c:	08001098 	.word	0x08001098
 8000470:	080010a8 	.word	0x080010a8
 8000474:	080010b8 	.word	0x080010b8
 8000478:	080010c8 	.word	0x080010c8
 800047c:	080010d8 	.word	0x080010d8
 8000480:	080010e8 	.word	0x080010e8
 8000484:	080010f8 	.word	0x080010f8

08000488 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <ITM_SendChar+0x48>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <ITM_SendChar+0x48>)
 8000498:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800049c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800049e:	4b0d      	ldr	r3, [pc, #52]	; (80004d4 <ITM_SendChar+0x4c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a0c      	ldr	r2, [pc, #48]	; (80004d4 <ITM_SendChar+0x4c>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004aa:	bf00      	nop
 80004ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d0f8      	beq.n	80004ac <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	6013      	str	r3, [r2, #0]
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	e000edfc 	.word	0xe000edfc
 80004d4:	e0000e00 	.word	0xe0000e00

080004d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]
 80004e8:	e00a      	b.n	8000500 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004ea:	f3af 8000 	nop.w
 80004ee:	4601      	mov	r1, r0
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	1c5a      	adds	r2, r3, #1
 80004f4:	60ba      	str	r2, [r7, #8]
 80004f6:	b2ca      	uxtb	r2, r1
 80004f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	3301      	adds	r3, #1
 80004fe:	617b      	str	r3, [r7, #20]
 8000500:	697a      	ldr	r2, [r7, #20]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	429a      	cmp	r2, r3
 8000506:	dbf0      	blt.n	80004ea <_read+0x12>
	}

return len;
 8000508:	687b      	ldr	r3, [r7, #4]
}
 800050a:	4618      	mov	r0, r3
 800050c:	3718      	adds	r7, #24
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b086      	sub	sp, #24
 8000516:	af00      	add	r7, sp, #0
 8000518:	60f8      	str	r0, [r7, #12]
 800051a:	60b9      	str	r1, [r7, #8]
 800051c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
 8000522:	e009      	b.n	8000538 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	1c5a      	adds	r2, r3, #1
 8000528:	60ba      	str	r2, [r7, #8]
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff ffab 	bl	8000488 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	3301      	adds	r3, #1
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	697a      	ldr	r2, [r7, #20]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	429a      	cmp	r2, r3
 800053e:	dbf1      	blt.n	8000524 <_write+0x12>
	}
	return len;
 8000540:	687b      	ldr	r3, [r7, #4]
}
 8000542:	4618      	mov	r0, r3
 8000544:	3718      	adds	r7, #24
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <_close>:

int _close(int file)
{
 800054a:	b480      	push	{r7}
 800054c:	b083      	sub	sp, #12
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
	return -1;
 8000552:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000556:	4618      	mov	r0, r3
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000562:	b480      	push	{r7}
 8000564:	b083      	sub	sp, #12
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
 800056a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000572:	605a      	str	r2, [r3, #4]
	return 0;
 8000574:	2300      	movs	r3, #0
}
 8000576:	4618      	mov	r0, r3
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <_isatty>:

int _isatty(int file)
{
 8000582:	b480      	push	{r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
	return 1;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
	return 0;
 80005a4:	2300      	movs	r3, #0
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
	...

080005b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005bc:	4a14      	ldr	r2, [pc, #80]	; (8000610 <_sbrk+0x5c>)
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <_sbrk+0x60>)
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <_sbrk+0x64>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d102      	bne.n	80005d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <_sbrk+0x64>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <_sbrk+0x68>)
 80005d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <_sbrk+0x64>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	693a      	ldr	r2, [r7, #16]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d207      	bcs.n	80005f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005e4:	f000 f846 	bl	8000674 <__errno>
 80005e8:	4603      	mov	r3, r0
 80005ea:	220c      	movs	r2, #12
 80005ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	e009      	b.n	8000608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <_sbrk+0x64>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005fa:	4b07      	ldr	r3, [pc, #28]	; (8000618 <_sbrk+0x64>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4413      	add	r3, r2
 8000602:	4a05      	ldr	r2, [pc, #20]	; (8000618 <_sbrk+0x64>)
 8000604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000606:	68fb      	ldr	r3, [r7, #12]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3718      	adds	r7, #24
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20020000 	.word	0x20020000
 8000614:	00000400 	.word	0x00000400
 8000618:	20000080 	.word	0x20000080
 800061c:	200000a0 	.word	0x200000a0

08000620 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000622:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000624:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <LoopForever+0x6>)
  ldr r1, =_edata
 800062a:	490d      	ldr	r1, [pc, #52]	; (8000660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800062c:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <LoopForever+0xe>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000630:	e002      	b.n	8000638 <LoopCopyDataInit>

08000632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000636:	3304      	adds	r3, #4

08000638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800063c:	d3f9      	bcc.n	8000632 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063e:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000640:	4c0a      	ldr	r4, [pc, #40]	; (800066c <LoopForever+0x16>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000644:	e001      	b.n	800064a <LoopFillZerobss>

08000646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000648:	3204      	adds	r2, #4

0800064a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800064c:	d3fb      	bcc.n	8000646 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800064e:	f000 f817 	bl	8000680 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000652:	f7ff fded 	bl	8000230 <main>

08000656 <LoopForever>:

LoopForever:
    b LoopForever
 8000656:	e7fe      	b.n	8000656 <LoopForever>
  ldr   r0, =_estack
 8000658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800065c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000660:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000664:	08001174 	.word	0x08001174
  ldr r2, =_sbss
 8000668:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800066c:	2000009c 	.word	0x2000009c

08000670 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000670:	e7fe      	b.n	8000670 <ADC_IRQHandler>
	...

08000674 <__errno>:
 8000674:	4b01      	ldr	r3, [pc, #4]	; (800067c <__errno+0x8>)
 8000676:	6818      	ldr	r0, [r3, #0]
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000000 	.word	0x20000000

08000680 <__libc_init_array>:
 8000680:	b570      	push	{r4, r5, r6, lr}
 8000682:	4d0d      	ldr	r5, [pc, #52]	; (80006b8 <__libc_init_array+0x38>)
 8000684:	4c0d      	ldr	r4, [pc, #52]	; (80006bc <__libc_init_array+0x3c>)
 8000686:	1b64      	subs	r4, r4, r5
 8000688:	10a4      	asrs	r4, r4, #2
 800068a:	2600      	movs	r6, #0
 800068c:	42a6      	cmp	r6, r4
 800068e:	d109      	bne.n	80006a4 <__libc_init_array+0x24>
 8000690:	4d0b      	ldr	r5, [pc, #44]	; (80006c0 <__libc_init_array+0x40>)
 8000692:	4c0c      	ldr	r4, [pc, #48]	; (80006c4 <__libc_init_array+0x44>)
 8000694:	f000 fce6 	bl	8001064 <_init>
 8000698:	1b64      	subs	r4, r4, r5
 800069a:	10a4      	asrs	r4, r4, #2
 800069c:	2600      	movs	r6, #0
 800069e:	42a6      	cmp	r6, r4
 80006a0:	d105      	bne.n	80006ae <__libc_init_array+0x2e>
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a8:	4798      	blx	r3
 80006aa:	3601      	adds	r6, #1
 80006ac:	e7ee      	b.n	800068c <__libc_init_array+0xc>
 80006ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80006b2:	4798      	blx	r3
 80006b4:	3601      	adds	r6, #1
 80006b6:	e7f2      	b.n	800069e <__libc_init_array+0x1e>
 80006b8:	0800116c 	.word	0x0800116c
 80006bc:	0800116c 	.word	0x0800116c
 80006c0:	0800116c 	.word	0x0800116c
 80006c4:	08001170 	.word	0x08001170

080006c8 <memset>:
 80006c8:	4402      	add	r2, r0
 80006ca:	4603      	mov	r3, r0
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d100      	bne.n	80006d2 <memset+0xa>
 80006d0:	4770      	bx	lr
 80006d2:	f803 1b01 	strb.w	r1, [r3], #1
 80006d6:	e7f9      	b.n	80006cc <memset+0x4>

080006d8 <_puts_r>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	460e      	mov	r6, r1
 80006dc:	4605      	mov	r5, r0
 80006de:	b118      	cbz	r0, 80006e8 <_puts_r+0x10>
 80006e0:	6983      	ldr	r3, [r0, #24]
 80006e2:	b90b      	cbnz	r3, 80006e8 <_puts_r+0x10>
 80006e4:	f000 fa48 	bl	8000b78 <__sinit>
 80006e8:	69ab      	ldr	r3, [r5, #24]
 80006ea:	68ac      	ldr	r4, [r5, #8]
 80006ec:	b913      	cbnz	r3, 80006f4 <_puts_r+0x1c>
 80006ee:	4628      	mov	r0, r5
 80006f0:	f000 fa42 	bl	8000b78 <__sinit>
 80006f4:	4b2c      	ldr	r3, [pc, #176]	; (80007a8 <_puts_r+0xd0>)
 80006f6:	429c      	cmp	r4, r3
 80006f8:	d120      	bne.n	800073c <_puts_r+0x64>
 80006fa:	686c      	ldr	r4, [r5, #4]
 80006fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006fe:	07db      	lsls	r3, r3, #31
 8000700:	d405      	bmi.n	800070e <_puts_r+0x36>
 8000702:	89a3      	ldrh	r3, [r4, #12]
 8000704:	0598      	lsls	r0, r3, #22
 8000706:	d402      	bmi.n	800070e <_puts_r+0x36>
 8000708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800070a:	f000 fad3 	bl	8000cb4 <__retarget_lock_acquire_recursive>
 800070e:	89a3      	ldrh	r3, [r4, #12]
 8000710:	0719      	lsls	r1, r3, #28
 8000712:	d51d      	bpl.n	8000750 <_puts_r+0x78>
 8000714:	6923      	ldr	r3, [r4, #16]
 8000716:	b1db      	cbz	r3, 8000750 <_puts_r+0x78>
 8000718:	3e01      	subs	r6, #1
 800071a:	68a3      	ldr	r3, [r4, #8]
 800071c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000720:	3b01      	subs	r3, #1
 8000722:	60a3      	str	r3, [r4, #8]
 8000724:	bb39      	cbnz	r1, 8000776 <_puts_r+0x9e>
 8000726:	2b00      	cmp	r3, #0
 8000728:	da38      	bge.n	800079c <_puts_r+0xc4>
 800072a:	4622      	mov	r2, r4
 800072c:	210a      	movs	r1, #10
 800072e:	4628      	mov	r0, r5
 8000730:	f000 f848 	bl	80007c4 <__swbuf_r>
 8000734:	3001      	adds	r0, #1
 8000736:	d011      	beq.n	800075c <_puts_r+0x84>
 8000738:	250a      	movs	r5, #10
 800073a:	e011      	b.n	8000760 <_puts_r+0x88>
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <_puts_r+0xd4>)
 800073e:	429c      	cmp	r4, r3
 8000740:	d101      	bne.n	8000746 <_puts_r+0x6e>
 8000742:	68ac      	ldr	r4, [r5, #8]
 8000744:	e7da      	b.n	80006fc <_puts_r+0x24>
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <_puts_r+0xd8>)
 8000748:	429c      	cmp	r4, r3
 800074a:	bf08      	it	eq
 800074c:	68ec      	ldreq	r4, [r5, #12]
 800074e:	e7d5      	b.n	80006fc <_puts_r+0x24>
 8000750:	4621      	mov	r1, r4
 8000752:	4628      	mov	r0, r5
 8000754:	f000 f888 	bl	8000868 <__swsetup_r>
 8000758:	2800      	cmp	r0, #0
 800075a:	d0dd      	beq.n	8000718 <_puts_r+0x40>
 800075c:	f04f 35ff 	mov.w	r5, #4294967295
 8000760:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000762:	07da      	lsls	r2, r3, #31
 8000764:	d405      	bmi.n	8000772 <_puts_r+0x9a>
 8000766:	89a3      	ldrh	r3, [r4, #12]
 8000768:	059b      	lsls	r3, r3, #22
 800076a:	d402      	bmi.n	8000772 <_puts_r+0x9a>
 800076c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800076e:	f000 faa2 	bl	8000cb6 <__retarget_lock_release_recursive>
 8000772:	4628      	mov	r0, r5
 8000774:	bd70      	pop	{r4, r5, r6, pc}
 8000776:	2b00      	cmp	r3, #0
 8000778:	da04      	bge.n	8000784 <_puts_r+0xac>
 800077a:	69a2      	ldr	r2, [r4, #24]
 800077c:	429a      	cmp	r2, r3
 800077e:	dc06      	bgt.n	800078e <_puts_r+0xb6>
 8000780:	290a      	cmp	r1, #10
 8000782:	d004      	beq.n	800078e <_puts_r+0xb6>
 8000784:	6823      	ldr	r3, [r4, #0]
 8000786:	1c5a      	adds	r2, r3, #1
 8000788:	6022      	str	r2, [r4, #0]
 800078a:	7019      	strb	r1, [r3, #0]
 800078c:	e7c5      	b.n	800071a <_puts_r+0x42>
 800078e:	4622      	mov	r2, r4
 8000790:	4628      	mov	r0, r5
 8000792:	f000 f817 	bl	80007c4 <__swbuf_r>
 8000796:	3001      	adds	r0, #1
 8000798:	d1bf      	bne.n	800071a <_puts_r+0x42>
 800079a:	e7df      	b.n	800075c <_puts_r+0x84>
 800079c:	6823      	ldr	r3, [r4, #0]
 800079e:	250a      	movs	r5, #10
 80007a0:	1c5a      	adds	r2, r3, #1
 80007a2:	6022      	str	r2, [r4, #0]
 80007a4:	701d      	strb	r5, [r3, #0]
 80007a6:	e7db      	b.n	8000760 <_puts_r+0x88>
 80007a8:	0800112c 	.word	0x0800112c
 80007ac:	0800114c 	.word	0x0800114c
 80007b0:	0800110c 	.word	0x0800110c

080007b4 <puts>:
 80007b4:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <puts+0xc>)
 80007b6:	4601      	mov	r1, r0
 80007b8:	6818      	ldr	r0, [r3, #0]
 80007ba:	f7ff bf8d 	b.w	80006d8 <_puts_r>
 80007be:	bf00      	nop
 80007c0:	20000000 	.word	0x20000000

080007c4 <__swbuf_r>:
 80007c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c6:	460e      	mov	r6, r1
 80007c8:	4614      	mov	r4, r2
 80007ca:	4605      	mov	r5, r0
 80007cc:	b118      	cbz	r0, 80007d6 <__swbuf_r+0x12>
 80007ce:	6983      	ldr	r3, [r0, #24]
 80007d0:	b90b      	cbnz	r3, 80007d6 <__swbuf_r+0x12>
 80007d2:	f000 f9d1 	bl	8000b78 <__sinit>
 80007d6:	4b21      	ldr	r3, [pc, #132]	; (800085c <__swbuf_r+0x98>)
 80007d8:	429c      	cmp	r4, r3
 80007da:	d12b      	bne.n	8000834 <__swbuf_r+0x70>
 80007dc:	686c      	ldr	r4, [r5, #4]
 80007de:	69a3      	ldr	r3, [r4, #24]
 80007e0:	60a3      	str	r3, [r4, #8]
 80007e2:	89a3      	ldrh	r3, [r4, #12]
 80007e4:	071a      	lsls	r2, r3, #28
 80007e6:	d52f      	bpl.n	8000848 <__swbuf_r+0x84>
 80007e8:	6923      	ldr	r3, [r4, #16]
 80007ea:	b36b      	cbz	r3, 8000848 <__swbuf_r+0x84>
 80007ec:	6923      	ldr	r3, [r4, #16]
 80007ee:	6820      	ldr	r0, [r4, #0]
 80007f0:	1ac0      	subs	r0, r0, r3
 80007f2:	6963      	ldr	r3, [r4, #20]
 80007f4:	b2f6      	uxtb	r6, r6
 80007f6:	4283      	cmp	r3, r0
 80007f8:	4637      	mov	r7, r6
 80007fa:	dc04      	bgt.n	8000806 <__swbuf_r+0x42>
 80007fc:	4621      	mov	r1, r4
 80007fe:	4628      	mov	r0, r5
 8000800:	f000 f926 	bl	8000a50 <_fflush_r>
 8000804:	bb30      	cbnz	r0, 8000854 <__swbuf_r+0x90>
 8000806:	68a3      	ldr	r3, [r4, #8]
 8000808:	3b01      	subs	r3, #1
 800080a:	60a3      	str	r3, [r4, #8]
 800080c:	6823      	ldr	r3, [r4, #0]
 800080e:	1c5a      	adds	r2, r3, #1
 8000810:	6022      	str	r2, [r4, #0]
 8000812:	701e      	strb	r6, [r3, #0]
 8000814:	6963      	ldr	r3, [r4, #20]
 8000816:	3001      	adds	r0, #1
 8000818:	4283      	cmp	r3, r0
 800081a:	d004      	beq.n	8000826 <__swbuf_r+0x62>
 800081c:	89a3      	ldrh	r3, [r4, #12]
 800081e:	07db      	lsls	r3, r3, #31
 8000820:	d506      	bpl.n	8000830 <__swbuf_r+0x6c>
 8000822:	2e0a      	cmp	r6, #10
 8000824:	d104      	bne.n	8000830 <__swbuf_r+0x6c>
 8000826:	4621      	mov	r1, r4
 8000828:	4628      	mov	r0, r5
 800082a:	f000 f911 	bl	8000a50 <_fflush_r>
 800082e:	b988      	cbnz	r0, 8000854 <__swbuf_r+0x90>
 8000830:	4638      	mov	r0, r7
 8000832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <__swbuf_r+0x9c>)
 8000836:	429c      	cmp	r4, r3
 8000838:	d101      	bne.n	800083e <__swbuf_r+0x7a>
 800083a:	68ac      	ldr	r4, [r5, #8]
 800083c:	e7cf      	b.n	80007de <__swbuf_r+0x1a>
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <__swbuf_r+0xa0>)
 8000840:	429c      	cmp	r4, r3
 8000842:	bf08      	it	eq
 8000844:	68ec      	ldreq	r4, [r5, #12]
 8000846:	e7ca      	b.n	80007de <__swbuf_r+0x1a>
 8000848:	4621      	mov	r1, r4
 800084a:	4628      	mov	r0, r5
 800084c:	f000 f80c 	bl	8000868 <__swsetup_r>
 8000850:	2800      	cmp	r0, #0
 8000852:	d0cb      	beq.n	80007ec <__swbuf_r+0x28>
 8000854:	f04f 37ff 	mov.w	r7, #4294967295
 8000858:	e7ea      	b.n	8000830 <__swbuf_r+0x6c>
 800085a:	bf00      	nop
 800085c:	0800112c 	.word	0x0800112c
 8000860:	0800114c 	.word	0x0800114c
 8000864:	0800110c 	.word	0x0800110c

08000868 <__swsetup_r>:
 8000868:	4b32      	ldr	r3, [pc, #200]	; (8000934 <__swsetup_r+0xcc>)
 800086a:	b570      	push	{r4, r5, r6, lr}
 800086c:	681d      	ldr	r5, [r3, #0]
 800086e:	4606      	mov	r6, r0
 8000870:	460c      	mov	r4, r1
 8000872:	b125      	cbz	r5, 800087e <__swsetup_r+0x16>
 8000874:	69ab      	ldr	r3, [r5, #24]
 8000876:	b913      	cbnz	r3, 800087e <__swsetup_r+0x16>
 8000878:	4628      	mov	r0, r5
 800087a:	f000 f97d 	bl	8000b78 <__sinit>
 800087e:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <__swsetup_r+0xd0>)
 8000880:	429c      	cmp	r4, r3
 8000882:	d10f      	bne.n	80008a4 <__swsetup_r+0x3c>
 8000884:	686c      	ldr	r4, [r5, #4]
 8000886:	89a3      	ldrh	r3, [r4, #12]
 8000888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800088c:	0719      	lsls	r1, r3, #28
 800088e:	d42c      	bmi.n	80008ea <__swsetup_r+0x82>
 8000890:	06dd      	lsls	r5, r3, #27
 8000892:	d411      	bmi.n	80008b8 <__swsetup_r+0x50>
 8000894:	2309      	movs	r3, #9
 8000896:	6033      	str	r3, [r6, #0]
 8000898:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800089c:	81a3      	strh	r3, [r4, #12]
 800089e:	f04f 30ff 	mov.w	r0, #4294967295
 80008a2:	e03e      	b.n	8000922 <__swsetup_r+0xba>
 80008a4:	4b25      	ldr	r3, [pc, #148]	; (800093c <__swsetup_r+0xd4>)
 80008a6:	429c      	cmp	r4, r3
 80008a8:	d101      	bne.n	80008ae <__swsetup_r+0x46>
 80008aa:	68ac      	ldr	r4, [r5, #8]
 80008ac:	e7eb      	b.n	8000886 <__swsetup_r+0x1e>
 80008ae:	4b24      	ldr	r3, [pc, #144]	; (8000940 <__swsetup_r+0xd8>)
 80008b0:	429c      	cmp	r4, r3
 80008b2:	bf08      	it	eq
 80008b4:	68ec      	ldreq	r4, [r5, #12]
 80008b6:	e7e6      	b.n	8000886 <__swsetup_r+0x1e>
 80008b8:	0758      	lsls	r0, r3, #29
 80008ba:	d512      	bpl.n	80008e2 <__swsetup_r+0x7a>
 80008bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008be:	b141      	cbz	r1, 80008d2 <__swsetup_r+0x6a>
 80008c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008c4:	4299      	cmp	r1, r3
 80008c6:	d002      	beq.n	80008ce <__swsetup_r+0x66>
 80008c8:	4630      	mov	r0, r6
 80008ca:	f000 fa59 	bl	8000d80 <_free_r>
 80008ce:	2300      	movs	r3, #0
 80008d0:	6363      	str	r3, [r4, #52]	; 0x34
 80008d2:	89a3      	ldrh	r3, [r4, #12]
 80008d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80008d8:	81a3      	strh	r3, [r4, #12]
 80008da:	2300      	movs	r3, #0
 80008dc:	6063      	str	r3, [r4, #4]
 80008de:	6923      	ldr	r3, [r4, #16]
 80008e0:	6023      	str	r3, [r4, #0]
 80008e2:	89a3      	ldrh	r3, [r4, #12]
 80008e4:	f043 0308 	orr.w	r3, r3, #8
 80008e8:	81a3      	strh	r3, [r4, #12]
 80008ea:	6923      	ldr	r3, [r4, #16]
 80008ec:	b94b      	cbnz	r3, 8000902 <__swsetup_r+0x9a>
 80008ee:	89a3      	ldrh	r3, [r4, #12]
 80008f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80008f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008f8:	d003      	beq.n	8000902 <__swsetup_r+0x9a>
 80008fa:	4621      	mov	r1, r4
 80008fc:	4630      	mov	r0, r6
 80008fe:	f000 f9ff 	bl	8000d00 <__smakebuf_r>
 8000902:	89a0      	ldrh	r0, [r4, #12]
 8000904:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000908:	f010 0301 	ands.w	r3, r0, #1
 800090c:	d00a      	beq.n	8000924 <__swsetup_r+0xbc>
 800090e:	2300      	movs	r3, #0
 8000910:	60a3      	str	r3, [r4, #8]
 8000912:	6963      	ldr	r3, [r4, #20]
 8000914:	425b      	negs	r3, r3
 8000916:	61a3      	str	r3, [r4, #24]
 8000918:	6923      	ldr	r3, [r4, #16]
 800091a:	b943      	cbnz	r3, 800092e <__swsetup_r+0xc6>
 800091c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000920:	d1ba      	bne.n	8000898 <__swsetup_r+0x30>
 8000922:	bd70      	pop	{r4, r5, r6, pc}
 8000924:	0781      	lsls	r1, r0, #30
 8000926:	bf58      	it	pl
 8000928:	6963      	ldrpl	r3, [r4, #20]
 800092a:	60a3      	str	r3, [r4, #8]
 800092c:	e7f4      	b.n	8000918 <__swsetup_r+0xb0>
 800092e:	2000      	movs	r0, #0
 8000930:	e7f7      	b.n	8000922 <__swsetup_r+0xba>
 8000932:	bf00      	nop
 8000934:	20000000 	.word	0x20000000
 8000938:	0800112c 	.word	0x0800112c
 800093c:	0800114c 	.word	0x0800114c
 8000940:	0800110c 	.word	0x0800110c

08000944 <__sflush_r>:
 8000944:	898a      	ldrh	r2, [r1, #12]
 8000946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800094a:	4605      	mov	r5, r0
 800094c:	0710      	lsls	r0, r2, #28
 800094e:	460c      	mov	r4, r1
 8000950:	d458      	bmi.n	8000a04 <__sflush_r+0xc0>
 8000952:	684b      	ldr	r3, [r1, #4]
 8000954:	2b00      	cmp	r3, #0
 8000956:	dc05      	bgt.n	8000964 <__sflush_r+0x20>
 8000958:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800095a:	2b00      	cmp	r3, #0
 800095c:	dc02      	bgt.n	8000964 <__sflush_r+0x20>
 800095e:	2000      	movs	r0, #0
 8000960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000966:	2e00      	cmp	r6, #0
 8000968:	d0f9      	beq.n	800095e <__sflush_r+0x1a>
 800096a:	2300      	movs	r3, #0
 800096c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000970:	682f      	ldr	r7, [r5, #0]
 8000972:	602b      	str	r3, [r5, #0]
 8000974:	d032      	beq.n	80009dc <__sflush_r+0x98>
 8000976:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000978:	89a3      	ldrh	r3, [r4, #12]
 800097a:	075a      	lsls	r2, r3, #29
 800097c:	d505      	bpl.n	800098a <__sflush_r+0x46>
 800097e:	6863      	ldr	r3, [r4, #4]
 8000980:	1ac0      	subs	r0, r0, r3
 8000982:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000984:	b10b      	cbz	r3, 800098a <__sflush_r+0x46>
 8000986:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000988:	1ac0      	subs	r0, r0, r3
 800098a:	2300      	movs	r3, #0
 800098c:	4602      	mov	r2, r0
 800098e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000990:	6a21      	ldr	r1, [r4, #32]
 8000992:	4628      	mov	r0, r5
 8000994:	47b0      	blx	r6
 8000996:	1c43      	adds	r3, r0, #1
 8000998:	89a3      	ldrh	r3, [r4, #12]
 800099a:	d106      	bne.n	80009aa <__sflush_r+0x66>
 800099c:	6829      	ldr	r1, [r5, #0]
 800099e:	291d      	cmp	r1, #29
 80009a0:	d82c      	bhi.n	80009fc <__sflush_r+0xb8>
 80009a2:	4a2a      	ldr	r2, [pc, #168]	; (8000a4c <__sflush_r+0x108>)
 80009a4:	40ca      	lsrs	r2, r1
 80009a6:	07d6      	lsls	r6, r2, #31
 80009a8:	d528      	bpl.n	80009fc <__sflush_r+0xb8>
 80009aa:	2200      	movs	r2, #0
 80009ac:	6062      	str	r2, [r4, #4]
 80009ae:	04d9      	lsls	r1, r3, #19
 80009b0:	6922      	ldr	r2, [r4, #16]
 80009b2:	6022      	str	r2, [r4, #0]
 80009b4:	d504      	bpl.n	80009c0 <__sflush_r+0x7c>
 80009b6:	1c42      	adds	r2, r0, #1
 80009b8:	d101      	bne.n	80009be <__sflush_r+0x7a>
 80009ba:	682b      	ldr	r3, [r5, #0]
 80009bc:	b903      	cbnz	r3, 80009c0 <__sflush_r+0x7c>
 80009be:	6560      	str	r0, [r4, #84]	; 0x54
 80009c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009c2:	602f      	str	r7, [r5, #0]
 80009c4:	2900      	cmp	r1, #0
 80009c6:	d0ca      	beq.n	800095e <__sflush_r+0x1a>
 80009c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009cc:	4299      	cmp	r1, r3
 80009ce:	d002      	beq.n	80009d6 <__sflush_r+0x92>
 80009d0:	4628      	mov	r0, r5
 80009d2:	f000 f9d5 	bl	8000d80 <_free_r>
 80009d6:	2000      	movs	r0, #0
 80009d8:	6360      	str	r0, [r4, #52]	; 0x34
 80009da:	e7c1      	b.n	8000960 <__sflush_r+0x1c>
 80009dc:	6a21      	ldr	r1, [r4, #32]
 80009de:	2301      	movs	r3, #1
 80009e0:	4628      	mov	r0, r5
 80009e2:	47b0      	blx	r6
 80009e4:	1c41      	adds	r1, r0, #1
 80009e6:	d1c7      	bne.n	8000978 <__sflush_r+0x34>
 80009e8:	682b      	ldr	r3, [r5, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d0c4      	beq.n	8000978 <__sflush_r+0x34>
 80009ee:	2b1d      	cmp	r3, #29
 80009f0:	d001      	beq.n	80009f6 <__sflush_r+0xb2>
 80009f2:	2b16      	cmp	r3, #22
 80009f4:	d101      	bne.n	80009fa <__sflush_r+0xb6>
 80009f6:	602f      	str	r7, [r5, #0]
 80009f8:	e7b1      	b.n	800095e <__sflush_r+0x1a>
 80009fa:	89a3      	ldrh	r3, [r4, #12]
 80009fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a00:	81a3      	strh	r3, [r4, #12]
 8000a02:	e7ad      	b.n	8000960 <__sflush_r+0x1c>
 8000a04:	690f      	ldr	r7, [r1, #16]
 8000a06:	2f00      	cmp	r7, #0
 8000a08:	d0a9      	beq.n	800095e <__sflush_r+0x1a>
 8000a0a:	0793      	lsls	r3, r2, #30
 8000a0c:	680e      	ldr	r6, [r1, #0]
 8000a0e:	bf08      	it	eq
 8000a10:	694b      	ldreq	r3, [r1, #20]
 8000a12:	600f      	str	r7, [r1, #0]
 8000a14:	bf18      	it	ne
 8000a16:	2300      	movne	r3, #0
 8000a18:	eba6 0807 	sub.w	r8, r6, r7
 8000a1c:	608b      	str	r3, [r1, #8]
 8000a1e:	f1b8 0f00 	cmp.w	r8, #0
 8000a22:	dd9c      	ble.n	800095e <__sflush_r+0x1a>
 8000a24:	6a21      	ldr	r1, [r4, #32]
 8000a26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a28:	4643      	mov	r3, r8
 8000a2a:	463a      	mov	r2, r7
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	47b0      	blx	r6
 8000a30:	2800      	cmp	r0, #0
 8000a32:	dc06      	bgt.n	8000a42 <__sflush_r+0xfe>
 8000a34:	89a3      	ldrh	r3, [r4, #12]
 8000a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a3a:	81a3      	strh	r3, [r4, #12]
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a40:	e78e      	b.n	8000960 <__sflush_r+0x1c>
 8000a42:	4407      	add	r7, r0
 8000a44:	eba8 0800 	sub.w	r8, r8, r0
 8000a48:	e7e9      	b.n	8000a1e <__sflush_r+0xda>
 8000a4a:	bf00      	nop
 8000a4c:	20400001 	.word	0x20400001

08000a50 <_fflush_r>:
 8000a50:	b538      	push	{r3, r4, r5, lr}
 8000a52:	690b      	ldr	r3, [r1, #16]
 8000a54:	4605      	mov	r5, r0
 8000a56:	460c      	mov	r4, r1
 8000a58:	b913      	cbnz	r3, 8000a60 <_fflush_r+0x10>
 8000a5a:	2500      	movs	r5, #0
 8000a5c:	4628      	mov	r0, r5
 8000a5e:	bd38      	pop	{r3, r4, r5, pc}
 8000a60:	b118      	cbz	r0, 8000a6a <_fflush_r+0x1a>
 8000a62:	6983      	ldr	r3, [r0, #24]
 8000a64:	b90b      	cbnz	r3, 8000a6a <_fflush_r+0x1a>
 8000a66:	f000 f887 	bl	8000b78 <__sinit>
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <_fflush_r+0x6c>)
 8000a6c:	429c      	cmp	r4, r3
 8000a6e:	d11b      	bne.n	8000aa8 <_fflush_r+0x58>
 8000a70:	686c      	ldr	r4, [r5, #4]
 8000a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0ef      	beq.n	8000a5a <_fflush_r+0xa>
 8000a7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000a7c:	07d0      	lsls	r0, r2, #31
 8000a7e:	d404      	bmi.n	8000a8a <_fflush_r+0x3a>
 8000a80:	0599      	lsls	r1, r3, #22
 8000a82:	d402      	bmi.n	8000a8a <_fflush_r+0x3a>
 8000a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a86:	f000 f915 	bl	8000cb4 <__retarget_lock_acquire_recursive>
 8000a8a:	4628      	mov	r0, r5
 8000a8c:	4621      	mov	r1, r4
 8000a8e:	f7ff ff59 	bl	8000944 <__sflush_r>
 8000a92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a94:	07da      	lsls	r2, r3, #31
 8000a96:	4605      	mov	r5, r0
 8000a98:	d4e0      	bmi.n	8000a5c <_fflush_r+0xc>
 8000a9a:	89a3      	ldrh	r3, [r4, #12]
 8000a9c:	059b      	lsls	r3, r3, #22
 8000a9e:	d4dd      	bmi.n	8000a5c <_fflush_r+0xc>
 8000aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000aa2:	f000 f908 	bl	8000cb6 <__retarget_lock_release_recursive>
 8000aa6:	e7d9      	b.n	8000a5c <_fflush_r+0xc>
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <_fflush_r+0x70>)
 8000aaa:	429c      	cmp	r4, r3
 8000aac:	d101      	bne.n	8000ab2 <_fflush_r+0x62>
 8000aae:	68ac      	ldr	r4, [r5, #8]
 8000ab0:	e7df      	b.n	8000a72 <_fflush_r+0x22>
 8000ab2:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <_fflush_r+0x74>)
 8000ab4:	429c      	cmp	r4, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	68ec      	ldreq	r4, [r5, #12]
 8000aba:	e7da      	b.n	8000a72 <_fflush_r+0x22>
 8000abc:	0800112c 	.word	0x0800112c
 8000ac0:	0800114c 	.word	0x0800114c
 8000ac4:	0800110c 	.word	0x0800110c

08000ac8 <std>:
 8000ac8:	2300      	movs	r3, #0
 8000aca:	b510      	push	{r4, lr}
 8000acc:	4604      	mov	r4, r0
 8000ace:	e9c0 3300 	strd	r3, r3, [r0]
 8000ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ad6:	6083      	str	r3, [r0, #8]
 8000ad8:	8181      	strh	r1, [r0, #12]
 8000ada:	6643      	str	r3, [r0, #100]	; 0x64
 8000adc:	81c2      	strh	r2, [r0, #14]
 8000ade:	6183      	str	r3, [r0, #24]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	2208      	movs	r2, #8
 8000ae4:	305c      	adds	r0, #92	; 0x5c
 8000ae6:	f7ff fdef 	bl	80006c8 <memset>
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <std+0x38>)
 8000aec:	6263      	str	r3, [r4, #36]	; 0x24
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <std+0x3c>)
 8000af0:	62a3      	str	r3, [r4, #40]	; 0x28
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <std+0x40>)
 8000af4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <std+0x44>)
 8000af8:	6224      	str	r4, [r4, #32]
 8000afa:	6323      	str	r3, [r4, #48]	; 0x30
 8000afc:	bd10      	pop	{r4, pc}
 8000afe:	bf00      	nop
 8000b00:	08000ef5 	.word	0x08000ef5
 8000b04:	08000f17 	.word	0x08000f17
 8000b08:	08000f4f 	.word	0x08000f4f
 8000b0c:	08000f73 	.word	0x08000f73

08000b10 <_cleanup_r>:
 8000b10:	4901      	ldr	r1, [pc, #4]	; (8000b18 <_cleanup_r+0x8>)
 8000b12:	f000 b8af 	b.w	8000c74 <_fwalk_reent>
 8000b16:	bf00      	nop
 8000b18:	08000a51 	.word	0x08000a51

08000b1c <__sfmoreglue>:
 8000b1c:	b570      	push	{r4, r5, r6, lr}
 8000b1e:	1e4a      	subs	r2, r1, #1
 8000b20:	2568      	movs	r5, #104	; 0x68
 8000b22:	4355      	muls	r5, r2
 8000b24:	460e      	mov	r6, r1
 8000b26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b2a:	f000 f979 	bl	8000e20 <_malloc_r>
 8000b2e:	4604      	mov	r4, r0
 8000b30:	b140      	cbz	r0, 8000b44 <__sfmoreglue+0x28>
 8000b32:	2100      	movs	r1, #0
 8000b34:	e9c0 1600 	strd	r1, r6, [r0]
 8000b38:	300c      	adds	r0, #12
 8000b3a:	60a0      	str	r0, [r4, #8]
 8000b3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b40:	f7ff fdc2 	bl	80006c8 <memset>
 8000b44:	4620      	mov	r0, r4
 8000b46:	bd70      	pop	{r4, r5, r6, pc}

08000b48 <__sfp_lock_acquire>:
 8000b48:	4801      	ldr	r0, [pc, #4]	; (8000b50 <__sfp_lock_acquire+0x8>)
 8000b4a:	f000 b8b3 	b.w	8000cb4 <__retarget_lock_acquire_recursive>
 8000b4e:	bf00      	nop
 8000b50:	20000094 	.word	0x20000094

08000b54 <__sfp_lock_release>:
 8000b54:	4801      	ldr	r0, [pc, #4]	; (8000b5c <__sfp_lock_release+0x8>)
 8000b56:	f000 b8ae 	b.w	8000cb6 <__retarget_lock_release_recursive>
 8000b5a:	bf00      	nop
 8000b5c:	20000094 	.word	0x20000094

08000b60 <__sinit_lock_acquire>:
 8000b60:	4801      	ldr	r0, [pc, #4]	; (8000b68 <__sinit_lock_acquire+0x8>)
 8000b62:	f000 b8a7 	b.w	8000cb4 <__retarget_lock_acquire_recursive>
 8000b66:	bf00      	nop
 8000b68:	2000008f 	.word	0x2000008f

08000b6c <__sinit_lock_release>:
 8000b6c:	4801      	ldr	r0, [pc, #4]	; (8000b74 <__sinit_lock_release+0x8>)
 8000b6e:	f000 b8a2 	b.w	8000cb6 <__retarget_lock_release_recursive>
 8000b72:	bf00      	nop
 8000b74:	2000008f 	.word	0x2000008f

08000b78 <__sinit>:
 8000b78:	b510      	push	{r4, lr}
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	f7ff fff0 	bl	8000b60 <__sinit_lock_acquire>
 8000b80:	69a3      	ldr	r3, [r4, #24]
 8000b82:	b11b      	cbz	r3, 8000b8c <__sinit+0x14>
 8000b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b88:	f7ff bff0 	b.w	8000b6c <__sinit_lock_release>
 8000b8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000b90:	6523      	str	r3, [r4, #80]	; 0x50
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <__sinit+0x68>)
 8000b94:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <__sinit+0x6c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	62a2      	str	r2, [r4, #40]	; 0x28
 8000b9a:	42a3      	cmp	r3, r4
 8000b9c:	bf04      	itt	eq
 8000b9e:	2301      	moveq	r3, #1
 8000ba0:	61a3      	streq	r3, [r4, #24]
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	f000 f820 	bl	8000be8 <__sfp>
 8000ba8:	6060      	str	r0, [r4, #4]
 8000baa:	4620      	mov	r0, r4
 8000bac:	f000 f81c 	bl	8000be8 <__sfp>
 8000bb0:	60a0      	str	r0, [r4, #8]
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f000 f818 	bl	8000be8 <__sfp>
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60e0      	str	r0, [r4, #12]
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	6860      	ldr	r0, [r4, #4]
 8000bc0:	f7ff ff82 	bl	8000ac8 <std>
 8000bc4:	68a0      	ldr	r0, [r4, #8]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2109      	movs	r1, #9
 8000bca:	f7ff ff7d 	bl	8000ac8 <std>
 8000bce:	68e0      	ldr	r0, [r4, #12]
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	2112      	movs	r1, #18
 8000bd4:	f7ff ff78 	bl	8000ac8 <std>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	61a3      	str	r3, [r4, #24]
 8000bdc:	e7d2      	b.n	8000b84 <__sinit+0xc>
 8000bde:	bf00      	nop
 8000be0:	08001108 	.word	0x08001108
 8000be4:	08000b11 	.word	0x08000b11

08000be8 <__sfp>:
 8000be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bea:	4607      	mov	r7, r0
 8000bec:	f7ff ffac 	bl	8000b48 <__sfp_lock_acquire>
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <__sfp+0x84>)
 8000bf2:	681e      	ldr	r6, [r3, #0]
 8000bf4:	69b3      	ldr	r3, [r6, #24]
 8000bf6:	b913      	cbnz	r3, 8000bfe <__sfp+0x16>
 8000bf8:	4630      	mov	r0, r6
 8000bfa:	f7ff ffbd 	bl	8000b78 <__sinit>
 8000bfe:	3648      	adds	r6, #72	; 0x48
 8000c00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	d503      	bpl.n	8000c10 <__sfp+0x28>
 8000c08:	6833      	ldr	r3, [r6, #0]
 8000c0a:	b30b      	cbz	r3, 8000c50 <__sfp+0x68>
 8000c0c:	6836      	ldr	r6, [r6, #0]
 8000c0e:	e7f7      	b.n	8000c00 <__sfp+0x18>
 8000c10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000c14:	b9d5      	cbnz	r5, 8000c4c <__sfp+0x64>
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <__sfp+0x88>)
 8000c18:	60e3      	str	r3, [r4, #12]
 8000c1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000c1e:	6665      	str	r5, [r4, #100]	; 0x64
 8000c20:	f000 f847 	bl	8000cb2 <__retarget_lock_init_recursive>
 8000c24:	f7ff ff96 	bl	8000b54 <__sfp_lock_release>
 8000c28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c30:	6025      	str	r5, [r4, #0]
 8000c32:	61a5      	str	r5, [r4, #24]
 8000c34:	2208      	movs	r2, #8
 8000c36:	4629      	mov	r1, r5
 8000c38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c3c:	f7ff fd44 	bl	80006c8 <memset>
 8000c40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c48:	4620      	mov	r0, r4
 8000c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c4c:	3468      	adds	r4, #104	; 0x68
 8000c4e:	e7d9      	b.n	8000c04 <__sfp+0x1c>
 8000c50:	2104      	movs	r1, #4
 8000c52:	4638      	mov	r0, r7
 8000c54:	f7ff ff62 	bl	8000b1c <__sfmoreglue>
 8000c58:	4604      	mov	r4, r0
 8000c5a:	6030      	str	r0, [r6, #0]
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	d1d5      	bne.n	8000c0c <__sfp+0x24>
 8000c60:	f7ff ff78 	bl	8000b54 <__sfp_lock_release>
 8000c64:	230c      	movs	r3, #12
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	e7ee      	b.n	8000c48 <__sfp+0x60>
 8000c6a:	bf00      	nop
 8000c6c:	08001108 	.word	0x08001108
 8000c70:	ffff0001 	.word	0xffff0001

08000c74 <_fwalk_reent>:
 8000c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c78:	4606      	mov	r6, r0
 8000c7a:	4688      	mov	r8, r1
 8000c7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c80:	2700      	movs	r7, #0
 8000c82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c86:	f1b9 0901 	subs.w	r9, r9, #1
 8000c8a:	d505      	bpl.n	8000c98 <_fwalk_reent+0x24>
 8000c8c:	6824      	ldr	r4, [r4, #0]
 8000c8e:	2c00      	cmp	r4, #0
 8000c90:	d1f7      	bne.n	8000c82 <_fwalk_reent+0xe>
 8000c92:	4638      	mov	r0, r7
 8000c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c98:	89ab      	ldrh	r3, [r5, #12]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d907      	bls.n	8000cae <_fwalk_reent+0x3a>
 8000c9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	d003      	beq.n	8000cae <_fwalk_reent+0x3a>
 8000ca6:	4629      	mov	r1, r5
 8000ca8:	4630      	mov	r0, r6
 8000caa:	47c0      	blx	r8
 8000cac:	4307      	orrs	r7, r0
 8000cae:	3568      	adds	r5, #104	; 0x68
 8000cb0:	e7e9      	b.n	8000c86 <_fwalk_reent+0x12>

08000cb2 <__retarget_lock_init_recursive>:
 8000cb2:	4770      	bx	lr

08000cb4 <__retarget_lock_acquire_recursive>:
 8000cb4:	4770      	bx	lr

08000cb6 <__retarget_lock_release_recursive>:
 8000cb6:	4770      	bx	lr

08000cb8 <__swhatbuf_r>:
 8000cb8:	b570      	push	{r4, r5, r6, lr}
 8000cba:	460e      	mov	r6, r1
 8000cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	b096      	sub	sp, #88	; 0x58
 8000cc4:	4614      	mov	r4, r2
 8000cc6:	461d      	mov	r5, r3
 8000cc8:	da07      	bge.n	8000cda <__swhatbuf_r+0x22>
 8000cca:	2300      	movs	r3, #0
 8000ccc:	602b      	str	r3, [r5, #0]
 8000cce:	89b3      	ldrh	r3, [r6, #12]
 8000cd0:	061a      	lsls	r2, r3, #24
 8000cd2:	d410      	bmi.n	8000cf6 <__swhatbuf_r+0x3e>
 8000cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd8:	e00e      	b.n	8000cf8 <__swhatbuf_r+0x40>
 8000cda:	466a      	mov	r2, sp
 8000cdc:	f000 f970 	bl	8000fc0 <_fstat_r>
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	dbf2      	blt.n	8000cca <__swhatbuf_r+0x12>
 8000ce4:	9a01      	ldr	r2, [sp, #4]
 8000ce6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000cea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000cee:	425a      	negs	r2, r3
 8000cf0:	415a      	adcs	r2, r3
 8000cf2:	602a      	str	r2, [r5, #0]
 8000cf4:	e7ee      	b.n	8000cd4 <__swhatbuf_r+0x1c>
 8000cf6:	2340      	movs	r3, #64	; 0x40
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	6023      	str	r3, [r4, #0]
 8000cfc:	b016      	add	sp, #88	; 0x58
 8000cfe:	bd70      	pop	{r4, r5, r6, pc}

08000d00 <__smakebuf_r>:
 8000d00:	898b      	ldrh	r3, [r1, #12]
 8000d02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d04:	079d      	lsls	r5, r3, #30
 8000d06:	4606      	mov	r6, r0
 8000d08:	460c      	mov	r4, r1
 8000d0a:	d507      	bpl.n	8000d1c <__smakebuf_r+0x1c>
 8000d0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000d10:	6023      	str	r3, [r4, #0]
 8000d12:	6123      	str	r3, [r4, #16]
 8000d14:	2301      	movs	r3, #1
 8000d16:	6163      	str	r3, [r4, #20]
 8000d18:	b002      	add	sp, #8
 8000d1a:	bd70      	pop	{r4, r5, r6, pc}
 8000d1c:	ab01      	add	r3, sp, #4
 8000d1e:	466a      	mov	r2, sp
 8000d20:	f7ff ffca 	bl	8000cb8 <__swhatbuf_r>
 8000d24:	9900      	ldr	r1, [sp, #0]
 8000d26:	4605      	mov	r5, r0
 8000d28:	4630      	mov	r0, r6
 8000d2a:	f000 f879 	bl	8000e20 <_malloc_r>
 8000d2e:	b948      	cbnz	r0, 8000d44 <__smakebuf_r+0x44>
 8000d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d34:	059a      	lsls	r2, r3, #22
 8000d36:	d4ef      	bmi.n	8000d18 <__smakebuf_r+0x18>
 8000d38:	f023 0303 	bic.w	r3, r3, #3
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	81a3      	strh	r3, [r4, #12]
 8000d42:	e7e3      	b.n	8000d0c <__smakebuf_r+0xc>
 8000d44:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <__smakebuf_r+0x7c>)
 8000d46:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d48:	89a3      	ldrh	r3, [r4, #12]
 8000d4a:	6020      	str	r0, [r4, #0]
 8000d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d50:	81a3      	strh	r3, [r4, #12]
 8000d52:	9b00      	ldr	r3, [sp, #0]
 8000d54:	6163      	str	r3, [r4, #20]
 8000d56:	9b01      	ldr	r3, [sp, #4]
 8000d58:	6120      	str	r0, [r4, #16]
 8000d5a:	b15b      	cbz	r3, 8000d74 <__smakebuf_r+0x74>
 8000d5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d60:	4630      	mov	r0, r6
 8000d62:	f000 f93f 	bl	8000fe4 <_isatty_r>
 8000d66:	b128      	cbz	r0, 8000d74 <__smakebuf_r+0x74>
 8000d68:	89a3      	ldrh	r3, [r4, #12]
 8000d6a:	f023 0303 	bic.w	r3, r3, #3
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	81a3      	strh	r3, [r4, #12]
 8000d74:	89a0      	ldrh	r0, [r4, #12]
 8000d76:	4305      	orrs	r5, r0
 8000d78:	81a5      	strh	r5, [r4, #12]
 8000d7a:	e7cd      	b.n	8000d18 <__smakebuf_r+0x18>
 8000d7c:	08000b11 	.word	0x08000b11

08000d80 <_free_r>:
 8000d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d82:	2900      	cmp	r1, #0
 8000d84:	d048      	beq.n	8000e18 <_free_r+0x98>
 8000d86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d8a:	9001      	str	r0, [sp, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f1a1 0404 	sub.w	r4, r1, #4
 8000d92:	bfb8      	it	lt
 8000d94:	18e4      	addlt	r4, r4, r3
 8000d96:	f000 f947 	bl	8001028 <__malloc_lock>
 8000d9a:	4a20      	ldr	r2, [pc, #128]	; (8000e1c <_free_r+0x9c>)
 8000d9c:	9801      	ldr	r0, [sp, #4]
 8000d9e:	6813      	ldr	r3, [r2, #0]
 8000da0:	4615      	mov	r5, r2
 8000da2:	b933      	cbnz	r3, 8000db2 <_free_r+0x32>
 8000da4:	6063      	str	r3, [r4, #4]
 8000da6:	6014      	str	r4, [r2, #0]
 8000da8:	b003      	add	sp, #12
 8000daa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000dae:	f000 b941 	b.w	8001034 <__malloc_unlock>
 8000db2:	42a3      	cmp	r3, r4
 8000db4:	d90b      	bls.n	8000dce <_free_r+0x4e>
 8000db6:	6821      	ldr	r1, [r4, #0]
 8000db8:	1862      	adds	r2, r4, r1
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	bf04      	itt	eq
 8000dbe:	681a      	ldreq	r2, [r3, #0]
 8000dc0:	685b      	ldreq	r3, [r3, #4]
 8000dc2:	6063      	str	r3, [r4, #4]
 8000dc4:	bf04      	itt	eq
 8000dc6:	1852      	addeq	r2, r2, r1
 8000dc8:	6022      	streq	r2, [r4, #0]
 8000dca:	602c      	str	r4, [r5, #0]
 8000dcc:	e7ec      	b.n	8000da8 <_free_r+0x28>
 8000dce:	461a      	mov	r2, r3
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	b10b      	cbz	r3, 8000dd8 <_free_r+0x58>
 8000dd4:	42a3      	cmp	r3, r4
 8000dd6:	d9fa      	bls.n	8000dce <_free_r+0x4e>
 8000dd8:	6811      	ldr	r1, [r2, #0]
 8000dda:	1855      	adds	r5, r2, r1
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	d10b      	bne.n	8000df8 <_free_r+0x78>
 8000de0:	6824      	ldr	r4, [r4, #0]
 8000de2:	4421      	add	r1, r4
 8000de4:	1854      	adds	r4, r2, r1
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	6011      	str	r1, [r2, #0]
 8000dea:	d1dd      	bne.n	8000da8 <_free_r+0x28>
 8000dec:	681c      	ldr	r4, [r3, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	6053      	str	r3, [r2, #4]
 8000df2:	4421      	add	r1, r4
 8000df4:	6011      	str	r1, [r2, #0]
 8000df6:	e7d7      	b.n	8000da8 <_free_r+0x28>
 8000df8:	d902      	bls.n	8000e00 <_free_r+0x80>
 8000dfa:	230c      	movs	r3, #12
 8000dfc:	6003      	str	r3, [r0, #0]
 8000dfe:	e7d3      	b.n	8000da8 <_free_r+0x28>
 8000e00:	6825      	ldr	r5, [r4, #0]
 8000e02:	1961      	adds	r1, r4, r5
 8000e04:	428b      	cmp	r3, r1
 8000e06:	bf04      	itt	eq
 8000e08:	6819      	ldreq	r1, [r3, #0]
 8000e0a:	685b      	ldreq	r3, [r3, #4]
 8000e0c:	6063      	str	r3, [r4, #4]
 8000e0e:	bf04      	itt	eq
 8000e10:	1949      	addeq	r1, r1, r5
 8000e12:	6021      	streq	r1, [r4, #0]
 8000e14:	6054      	str	r4, [r2, #4]
 8000e16:	e7c7      	b.n	8000da8 <_free_r+0x28>
 8000e18:	b003      	add	sp, #12
 8000e1a:	bd30      	pop	{r4, r5, pc}
 8000e1c:	20000084 	.word	0x20000084

08000e20 <_malloc_r>:
 8000e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e22:	1ccd      	adds	r5, r1, #3
 8000e24:	f025 0503 	bic.w	r5, r5, #3
 8000e28:	3508      	adds	r5, #8
 8000e2a:	2d0c      	cmp	r5, #12
 8000e2c:	bf38      	it	cc
 8000e2e:	250c      	movcc	r5, #12
 8000e30:	2d00      	cmp	r5, #0
 8000e32:	4606      	mov	r6, r0
 8000e34:	db01      	blt.n	8000e3a <_malloc_r+0x1a>
 8000e36:	42a9      	cmp	r1, r5
 8000e38:	d903      	bls.n	8000e42 <_malloc_r+0x22>
 8000e3a:	230c      	movs	r3, #12
 8000e3c:	6033      	str	r3, [r6, #0]
 8000e3e:	2000      	movs	r0, #0
 8000e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e42:	f000 f8f1 	bl	8001028 <__malloc_lock>
 8000e46:	4921      	ldr	r1, [pc, #132]	; (8000ecc <_malloc_r+0xac>)
 8000e48:	680a      	ldr	r2, [r1, #0]
 8000e4a:	4614      	mov	r4, r2
 8000e4c:	b99c      	cbnz	r4, 8000e76 <_malloc_r+0x56>
 8000e4e:	4f20      	ldr	r7, [pc, #128]	; (8000ed0 <_malloc_r+0xb0>)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b923      	cbnz	r3, 8000e5e <_malloc_r+0x3e>
 8000e54:	4621      	mov	r1, r4
 8000e56:	4630      	mov	r0, r6
 8000e58:	f000 f83c 	bl	8000ed4 <_sbrk_r>
 8000e5c:	6038      	str	r0, [r7, #0]
 8000e5e:	4629      	mov	r1, r5
 8000e60:	4630      	mov	r0, r6
 8000e62:	f000 f837 	bl	8000ed4 <_sbrk_r>
 8000e66:	1c43      	adds	r3, r0, #1
 8000e68:	d123      	bne.n	8000eb2 <_malloc_r+0x92>
 8000e6a:	230c      	movs	r3, #12
 8000e6c:	6033      	str	r3, [r6, #0]
 8000e6e:	4630      	mov	r0, r6
 8000e70:	f000 f8e0 	bl	8001034 <__malloc_unlock>
 8000e74:	e7e3      	b.n	8000e3e <_malloc_r+0x1e>
 8000e76:	6823      	ldr	r3, [r4, #0]
 8000e78:	1b5b      	subs	r3, r3, r5
 8000e7a:	d417      	bmi.n	8000eac <_malloc_r+0x8c>
 8000e7c:	2b0b      	cmp	r3, #11
 8000e7e:	d903      	bls.n	8000e88 <_malloc_r+0x68>
 8000e80:	6023      	str	r3, [r4, #0]
 8000e82:	441c      	add	r4, r3
 8000e84:	6025      	str	r5, [r4, #0]
 8000e86:	e004      	b.n	8000e92 <_malloc_r+0x72>
 8000e88:	6863      	ldr	r3, [r4, #4]
 8000e8a:	42a2      	cmp	r2, r4
 8000e8c:	bf0c      	ite	eq
 8000e8e:	600b      	streq	r3, [r1, #0]
 8000e90:	6053      	strne	r3, [r2, #4]
 8000e92:	4630      	mov	r0, r6
 8000e94:	f000 f8ce 	bl	8001034 <__malloc_unlock>
 8000e98:	f104 000b 	add.w	r0, r4, #11
 8000e9c:	1d23      	adds	r3, r4, #4
 8000e9e:	f020 0007 	bic.w	r0, r0, #7
 8000ea2:	1ac2      	subs	r2, r0, r3
 8000ea4:	d0cc      	beq.n	8000e40 <_malloc_r+0x20>
 8000ea6:	1a1b      	subs	r3, r3, r0
 8000ea8:	50a3      	str	r3, [r4, r2]
 8000eaa:	e7c9      	b.n	8000e40 <_malloc_r+0x20>
 8000eac:	4622      	mov	r2, r4
 8000eae:	6864      	ldr	r4, [r4, #4]
 8000eb0:	e7cc      	b.n	8000e4c <_malloc_r+0x2c>
 8000eb2:	1cc4      	adds	r4, r0, #3
 8000eb4:	f024 0403 	bic.w	r4, r4, #3
 8000eb8:	42a0      	cmp	r0, r4
 8000eba:	d0e3      	beq.n	8000e84 <_malloc_r+0x64>
 8000ebc:	1a21      	subs	r1, r4, r0
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	f000 f808 	bl	8000ed4 <_sbrk_r>
 8000ec4:	3001      	adds	r0, #1
 8000ec6:	d1dd      	bne.n	8000e84 <_malloc_r+0x64>
 8000ec8:	e7cf      	b.n	8000e6a <_malloc_r+0x4a>
 8000eca:	bf00      	nop
 8000ecc:	20000084 	.word	0x20000084
 8000ed0:	20000088 	.word	0x20000088

08000ed4 <_sbrk_r>:
 8000ed4:	b538      	push	{r3, r4, r5, lr}
 8000ed6:	4d06      	ldr	r5, [pc, #24]	; (8000ef0 <_sbrk_r+0x1c>)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	4604      	mov	r4, r0
 8000edc:	4608      	mov	r0, r1
 8000ede:	602b      	str	r3, [r5, #0]
 8000ee0:	f7ff fb68 	bl	80005b4 <_sbrk>
 8000ee4:	1c43      	adds	r3, r0, #1
 8000ee6:	d102      	bne.n	8000eee <_sbrk_r+0x1a>
 8000ee8:	682b      	ldr	r3, [r5, #0]
 8000eea:	b103      	cbz	r3, 8000eee <_sbrk_r+0x1a>
 8000eec:	6023      	str	r3, [r4, #0]
 8000eee:	bd38      	pop	{r3, r4, r5, pc}
 8000ef0:	20000098 	.word	0x20000098

08000ef4 <__sread>:
 8000ef4:	b510      	push	{r4, lr}
 8000ef6:	460c      	mov	r4, r1
 8000ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000efc:	f000 f8a0 	bl	8001040 <_read_r>
 8000f00:	2800      	cmp	r0, #0
 8000f02:	bfab      	itete	ge
 8000f04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f06:	89a3      	ldrhlt	r3, [r4, #12]
 8000f08:	181b      	addge	r3, r3, r0
 8000f0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f0e:	bfac      	ite	ge
 8000f10:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f12:	81a3      	strhlt	r3, [r4, #12]
 8000f14:	bd10      	pop	{r4, pc}

08000f16 <__swrite>:
 8000f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f1a:	461f      	mov	r7, r3
 8000f1c:	898b      	ldrh	r3, [r1, #12]
 8000f1e:	05db      	lsls	r3, r3, #23
 8000f20:	4605      	mov	r5, r0
 8000f22:	460c      	mov	r4, r1
 8000f24:	4616      	mov	r6, r2
 8000f26:	d505      	bpl.n	8000f34 <__swrite+0x1e>
 8000f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f000 f868 	bl	8001004 <_lseek_r>
 8000f34:	89a3      	ldrh	r3, [r4, #12]
 8000f36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f3e:	81a3      	strh	r3, [r4, #12]
 8000f40:	4632      	mov	r2, r6
 8000f42:	463b      	mov	r3, r7
 8000f44:	4628      	mov	r0, r5
 8000f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f4a:	f000 b817 	b.w	8000f7c <_write_r>

08000f4e <__sseek>:
 8000f4e:	b510      	push	{r4, lr}
 8000f50:	460c      	mov	r4, r1
 8000f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f56:	f000 f855 	bl	8001004 <_lseek_r>
 8000f5a:	1c43      	adds	r3, r0, #1
 8000f5c:	89a3      	ldrh	r3, [r4, #12]
 8000f5e:	bf15      	itete	ne
 8000f60:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f6a:	81a3      	strheq	r3, [r4, #12]
 8000f6c:	bf18      	it	ne
 8000f6e:	81a3      	strhne	r3, [r4, #12]
 8000f70:	bd10      	pop	{r4, pc}

08000f72 <__sclose>:
 8000f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f76:	f000 b813 	b.w	8000fa0 <_close_r>
	...

08000f7c <_write_r>:
 8000f7c:	b538      	push	{r3, r4, r5, lr}
 8000f7e:	4d07      	ldr	r5, [pc, #28]	; (8000f9c <_write_r+0x20>)
 8000f80:	4604      	mov	r4, r0
 8000f82:	4608      	mov	r0, r1
 8000f84:	4611      	mov	r1, r2
 8000f86:	2200      	movs	r2, #0
 8000f88:	602a      	str	r2, [r5, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	f7ff fac1 	bl	8000512 <_write>
 8000f90:	1c43      	adds	r3, r0, #1
 8000f92:	d102      	bne.n	8000f9a <_write_r+0x1e>
 8000f94:	682b      	ldr	r3, [r5, #0]
 8000f96:	b103      	cbz	r3, 8000f9a <_write_r+0x1e>
 8000f98:	6023      	str	r3, [r4, #0]
 8000f9a:	bd38      	pop	{r3, r4, r5, pc}
 8000f9c:	20000098 	.word	0x20000098

08000fa0 <_close_r>:
 8000fa0:	b538      	push	{r3, r4, r5, lr}
 8000fa2:	4d06      	ldr	r5, [pc, #24]	; (8000fbc <_close_r+0x1c>)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	4608      	mov	r0, r1
 8000faa:	602b      	str	r3, [r5, #0]
 8000fac:	f7ff facd 	bl	800054a <_close>
 8000fb0:	1c43      	adds	r3, r0, #1
 8000fb2:	d102      	bne.n	8000fba <_close_r+0x1a>
 8000fb4:	682b      	ldr	r3, [r5, #0]
 8000fb6:	b103      	cbz	r3, 8000fba <_close_r+0x1a>
 8000fb8:	6023      	str	r3, [r4, #0]
 8000fba:	bd38      	pop	{r3, r4, r5, pc}
 8000fbc:	20000098 	.word	0x20000098

08000fc0 <_fstat_r>:
 8000fc0:	b538      	push	{r3, r4, r5, lr}
 8000fc2:	4d07      	ldr	r5, [pc, #28]	; (8000fe0 <_fstat_r+0x20>)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	4608      	mov	r0, r1
 8000fca:	4611      	mov	r1, r2
 8000fcc:	602b      	str	r3, [r5, #0]
 8000fce:	f7ff fac8 	bl	8000562 <_fstat>
 8000fd2:	1c43      	adds	r3, r0, #1
 8000fd4:	d102      	bne.n	8000fdc <_fstat_r+0x1c>
 8000fd6:	682b      	ldr	r3, [r5, #0]
 8000fd8:	b103      	cbz	r3, 8000fdc <_fstat_r+0x1c>
 8000fda:	6023      	str	r3, [r4, #0]
 8000fdc:	bd38      	pop	{r3, r4, r5, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000098 	.word	0x20000098

08000fe4 <_isatty_r>:
 8000fe4:	b538      	push	{r3, r4, r5, lr}
 8000fe6:	4d06      	ldr	r5, [pc, #24]	; (8001000 <_isatty_r+0x1c>)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	4604      	mov	r4, r0
 8000fec:	4608      	mov	r0, r1
 8000fee:	602b      	str	r3, [r5, #0]
 8000ff0:	f7ff fac7 	bl	8000582 <_isatty>
 8000ff4:	1c43      	adds	r3, r0, #1
 8000ff6:	d102      	bne.n	8000ffe <_isatty_r+0x1a>
 8000ff8:	682b      	ldr	r3, [r5, #0]
 8000ffa:	b103      	cbz	r3, 8000ffe <_isatty_r+0x1a>
 8000ffc:	6023      	str	r3, [r4, #0]
 8000ffe:	bd38      	pop	{r3, r4, r5, pc}
 8001000:	20000098 	.word	0x20000098

08001004 <_lseek_r>:
 8001004:	b538      	push	{r3, r4, r5, lr}
 8001006:	4d07      	ldr	r5, [pc, #28]	; (8001024 <_lseek_r+0x20>)
 8001008:	4604      	mov	r4, r0
 800100a:	4608      	mov	r0, r1
 800100c:	4611      	mov	r1, r2
 800100e:	2200      	movs	r2, #0
 8001010:	602a      	str	r2, [r5, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	f7ff fac0 	bl	8000598 <_lseek>
 8001018:	1c43      	adds	r3, r0, #1
 800101a:	d102      	bne.n	8001022 <_lseek_r+0x1e>
 800101c:	682b      	ldr	r3, [r5, #0]
 800101e:	b103      	cbz	r3, 8001022 <_lseek_r+0x1e>
 8001020:	6023      	str	r3, [r4, #0]
 8001022:	bd38      	pop	{r3, r4, r5, pc}
 8001024:	20000098 	.word	0x20000098

08001028 <__malloc_lock>:
 8001028:	4801      	ldr	r0, [pc, #4]	; (8001030 <__malloc_lock+0x8>)
 800102a:	f7ff be43 	b.w	8000cb4 <__retarget_lock_acquire_recursive>
 800102e:	bf00      	nop
 8001030:	20000090 	.word	0x20000090

08001034 <__malloc_unlock>:
 8001034:	4801      	ldr	r0, [pc, #4]	; (800103c <__malloc_unlock+0x8>)
 8001036:	f7ff be3e 	b.w	8000cb6 <__retarget_lock_release_recursive>
 800103a:	bf00      	nop
 800103c:	20000090 	.word	0x20000090

08001040 <_read_r>:
 8001040:	b538      	push	{r3, r4, r5, lr}
 8001042:	4d07      	ldr	r5, [pc, #28]	; (8001060 <_read_r+0x20>)
 8001044:	4604      	mov	r4, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4611      	mov	r1, r2
 800104a:	2200      	movs	r2, #0
 800104c:	602a      	str	r2, [r5, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	f7ff fa42 	bl	80004d8 <_read>
 8001054:	1c43      	adds	r3, r0, #1
 8001056:	d102      	bne.n	800105e <_read_r+0x1e>
 8001058:	682b      	ldr	r3, [r5, #0]
 800105a:	b103      	cbz	r3, 800105e <_read_r+0x1e>
 800105c:	6023      	str	r3, [r4, #0]
 800105e:	bd38      	pop	{r3, r4, r5, pc}
 8001060:	20000098 	.word	0x20000098

08001064 <_init>:
 8001064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001066:	bf00      	nop
 8001068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800106a:	bc08      	pop	{r3}
 800106c:	469e      	mov	lr, r3
 800106e:	4770      	bx	lr

08001070 <_fini>:
 8001070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001072:	bf00      	nop
 8001074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001076:	bc08      	pop	{r3}
 8001078:	469e      	mov	lr, r3
 800107a:	4770      	bx	lr
