
NucleoF446re_PinRead.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001ac  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000370  08000378  00010378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000370  08000370  00010378  2**0
                  CONTENTS
  4 .ARM          00000000  08000370  08000370  00010378  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000370  08000378  00010378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000370  08000370  00010370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000374  08000374  00010374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000378  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000378  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010378  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a00  00000000  00000000  000103a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001cd  00000000  00000000  00010da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00010f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000030  00000000  00000000  00010fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001cba  00000000  00000000  00010ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000668  00000000  00000000  00012caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007f25  00000000  00000000  00013312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001b237  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  0001b28c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000358 	.word	0x08000358

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000358 	.word	0x08000358

08000204 <main>:
/*nButton is conected on PC13*/
#include<stdint.h>
#include<stdio.h>

int main(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b089      	sub	sp, #36	; 0x24
 8000208:	af00      	add	r7, sp, #0
	uint32_t *pCntlkCtrlReg=(uint32_t*)0x40023830;
 800020a:	4b26      	ldr	r3, [pc, #152]	; (80002a4 <main+0xa0>)
 800020c:	617b      	str	r3, [r7, #20]

	uint32_t *pPortAModeReg=(uint32_t*)0x40020000;
 800020e:	4b26      	ldr	r3, [pc, #152]	; (80002a8 <main+0xa4>)
 8000210:	613b      	str	r3, [r7, #16]
	uint32_t *pPortAOutReg=(uint32_t*)0x40020014;
 8000212:	4b26      	ldr	r3, [pc, #152]	; (80002ac <main+0xa8>)
 8000214:	60fb      	str	r3, [r7, #12]

	uint32_t *pPortCModeReg=(uint32_t*)0x40020800;	//0x4002 0800 - 0x4002 0BFF		//GPIOC base adres
 8000216:	4b26      	ldr	r3, [pc, #152]	; (80002b0 <main+0xac>)
 8000218:	60bb      	str	r3, [r7, #8]
	uint32_t *pPortCInReg=(uint32_t*)0x40020810;
 800021a:	4b26      	ldr	r3, [pc, #152]	; (80002b4 <main+0xb0>)
 800021c:	607b      	str	r3, [r7, #4]


	//1. Enable the Clock GPIOD, GPOIA
	*pCntlkCtrlReg |= (1<<0);//*pClkCtrlReg |= 0x01;	//Enable Clock on PortA
 800021e:	697b      	ldr	r3, [r7, #20]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 0201 	orr.w	r2, r3, #1
 8000226:	697b      	ldr	r3, [r7, #20]
 8000228:	601a      	str	r2, [r3, #0]
	*pCntlkCtrlReg |= (1<<2);							//Enable Clock on PortC //6.3.10 RCC AHB1 peripheral clock enable register (RCC_AHB1ENR)
 800022a:	697b      	ldr	r3, [r7, #20]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 0204 	orr.w	r2, r3, #4
 8000232:	697b      	ldr	r3, [r7, #20]
 8000234:	601a      	str	r2, [r3, #0]

	//Configure PA5 IO pin as output
	//a. clear 10 and 11 position
	*pPortAModeReg &=~(3<<10);//*pPortAModeReg &= 0xFFFFF3FF;
 8000236:	693b      	ldr	r3, [r7, #16]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800023e:	693b      	ldr	r3, [r7, #16]
 8000240:	601a      	str	r2, [r3, #0]
	//b make 10 position as 1 set
	*pPortAModeReg |= (1<<10);//*pPortAModeReg |= 0x00000400;
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800024a:	693b      	ldr	r3, [r7, #16]
 800024c:	601a      	str	r2, [r3, #0]


	//Configuring PC13 as input mode (GPIOC MODE Register) 00: input- reset state
	*pPortCModeReg &=~(3<<13);
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	601a      	str	r2, [r3, #0]

	uint32_t pinStatus=*pPortCInReg;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	603b      	str	r3, [r7, #0]


	while(1){
		//turn on LED
				*pPortAOutReg |=(1<<5);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f043 0220 	orr.w	r2, r3, #32
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	601a      	str	r2, [r3, #0]
		for(uint32_t i=0; i<500000; i++);
 800026c:	2300      	movs	r3, #0
 800026e:	61fb      	str	r3, [r7, #28]
 8000270:	e002      	b.n	8000278 <main+0x74>
 8000272:	69fb      	ldr	r3, [r7, #28]
 8000274:	3301      	adds	r3, #1
 8000276:	61fb      	str	r3, [r7, #28]
 8000278:	69fb      	ldr	r3, [r7, #28]
 800027a:	4a0f      	ldr	r2, [pc, #60]	; (80002b8 <main+0xb4>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d9f8      	bls.n	8000272 <main+0x6e>
		//turn off the LED
					*pPortAOutReg &=~(1<<5);
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f023 0220 	bic.w	r2, r3, #32
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	601a      	str	r2, [r3, #0]
		for(uint32_t i=0; i<500000; i++);
 800028c:	2300      	movs	r3, #0
 800028e:	61bb      	str	r3, [r7, #24]
 8000290:	e002      	b.n	8000298 <main+0x94>
 8000292:	69bb      	ldr	r3, [r7, #24]
 8000294:	3301      	adds	r3, #1
 8000296:	61bb      	str	r3, [r7, #24]
 8000298:	69bb      	ldr	r3, [r7, #24]
 800029a:	4a07      	ldr	r2, [pc, #28]	; (80002b8 <main+0xb4>)
 800029c:	4293      	cmp	r3, r2
 800029e:	d9f8      	bls.n	8000292 <main+0x8e>
				*pPortAOutReg |=(1<<5);
 80002a0:	e7de      	b.n	8000260 <main+0x5c>
 80002a2:	bf00      	nop
 80002a4:	40023830 	.word	0x40023830
 80002a8:	40020000 	.word	0x40020000
 80002ac:	40020014 	.word	0x40020014
 80002b0:	40020800 	.word	0x40020800
 80002b4:	40020810 	.word	0x40020810
 80002b8:	0007a11f 	.word	0x0007a11f

080002bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002be:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c4:	480c      	ldr	r0, [pc, #48]	; (80002f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c6:	490d      	ldr	r1, [pc, #52]	; (80002fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c8:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <LoopForever+0xe>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002cc:	e002      	b.n	80002d4 <LoopCopyDataInit>

080002ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d2:	3304      	adds	r3, #4

080002d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d8:	d3f9      	bcc.n	80002ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002da:	4a0a      	ldr	r2, [pc, #40]	; (8000304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002dc:	4c0a      	ldr	r4, [pc, #40]	; (8000308 <LoopForever+0x16>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e0:	e001      	b.n	80002e6 <LoopFillZerobss>

080002e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e4:	3204      	adds	r2, #4

080002e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e8:	d3fb      	bcc.n	80002e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ea:	f000 f811 	bl	8000310 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ee:	f7ff ff89 	bl	8000204 <main>

080002f2 <LoopForever>:

LoopForever:
    b LoopForever
 80002f2:	e7fe      	b.n	80002f2 <LoopForever>
  ldr   r0, =_estack
 80002f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000300:	08000378 	.word	0x08000378
  ldr r2, =_sbss
 8000304:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000308:	2000001c 	.word	0x2000001c

0800030c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800030c:	e7fe      	b.n	800030c <ADC_IRQHandler>
	...

08000310 <__libc_init_array>:
 8000310:	b570      	push	{r4, r5, r6, lr}
 8000312:	4d0d      	ldr	r5, [pc, #52]	; (8000348 <__libc_init_array+0x38>)
 8000314:	4c0d      	ldr	r4, [pc, #52]	; (800034c <__libc_init_array+0x3c>)
 8000316:	1b64      	subs	r4, r4, r5
 8000318:	10a4      	asrs	r4, r4, #2
 800031a:	2600      	movs	r6, #0
 800031c:	42a6      	cmp	r6, r4
 800031e:	d109      	bne.n	8000334 <__libc_init_array+0x24>
 8000320:	4d0b      	ldr	r5, [pc, #44]	; (8000350 <__libc_init_array+0x40>)
 8000322:	4c0c      	ldr	r4, [pc, #48]	; (8000354 <__libc_init_array+0x44>)
 8000324:	f000 f818 	bl	8000358 <_init>
 8000328:	1b64      	subs	r4, r4, r5
 800032a:	10a4      	asrs	r4, r4, #2
 800032c:	2600      	movs	r6, #0
 800032e:	42a6      	cmp	r6, r4
 8000330:	d105      	bne.n	800033e <__libc_init_array+0x2e>
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f855 3b04 	ldr.w	r3, [r5], #4
 8000338:	4798      	blx	r3
 800033a:	3601      	adds	r6, #1
 800033c:	e7ee      	b.n	800031c <__libc_init_array+0xc>
 800033e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000342:	4798      	blx	r3
 8000344:	3601      	adds	r6, #1
 8000346:	e7f2      	b.n	800032e <__libc_init_array+0x1e>
 8000348:	08000370 	.word	0x08000370
 800034c:	08000370 	.word	0x08000370
 8000350:	08000370 	.word	0x08000370
 8000354:	08000374 	.word	0x08000374

08000358 <_init>:
 8000358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035a:	bf00      	nop
 800035c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035e:	bc08      	pop	{r3}
 8000360:	469e      	mov	lr, r3
 8000362:	4770      	bx	lr

08000364 <_fini>:
 8000364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000366:	bf00      	nop
 8000368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036a:	bc08      	pop	{r3}
 800036c:	469e      	mov	lr, r3
 800036e:	4770      	bx	lr
